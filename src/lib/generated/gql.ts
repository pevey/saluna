/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n      mutation AddItemToOrder($variantId: ID!, $quantity: Int!) {\n         addItemToOrder(productVariantId: $variantId, quantity: $quantity) {\n            __typename\n            ...UpdatedOrder\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n            ... on InsufficientStockError {\n               quantityAvailable\n               order {\n                  ...UpdatedOrder\n               }\n            }\n         }\n      }\n      fragment UpdatedOrder on Order {\n         id\n         code\n         state\n         totalQuantity\n         totalWithTax\n         currencyCode\n         lines {\n            id\n            unitPriceWithTax\n            quantity\n            linePriceWithTax\n            productVariant {\n               id\n               name\n            }\n         }\n      }\n   ": types.AddItemToOrderDocument,
    "\n      query GetActiveOrder {\n         activeOrder {\n            ...ActiveOrder\n         }\n      }\n      fragment ActiveOrder on Order {\n         __typename\n         id\n         code\n         couponCodes\n         state\n         currencyCode\n         totalQuantity\n         subTotal\n         shipping\n         total\n         totalWithTax\n         taxSummary {\n            description\n            taxRate\n            taxBase\n            taxTotal\n         }\n         discounts {\n            description\n            amountWithTax\n         }\n         lines {\n            id\n            unitPrice\n            unitPriceWithTax\n            quantity\n            linePrice\n            linePriceWithTax\n            productVariant {\n               id\n               name\n               sku\n               product {\n                  slug\n               }\n            }\n            featuredAsset {\n               id\n               preview\n            }\n         }\n         shippingLines {\n            shippingMethod {\n               description\n            }\n            priceWithTax\n         }\n      }\n   ": types.GetActiveOrderDocument,
    "\n      query GetCollection($slug: String!) {\n         collection(slug: $slug) {\n            id\n            name\n            slug\n            description\n            featuredAsset {\n               id\n               preview\n            }\n         }\n      }\n   ": types.GetCollectionDocument,
    "\n      query GetCollectionProducts($slug: String!, $skip: Int, $take: Int) {\n         search(\n         input: {\n            collectionSlug: $slug,\n            groupByProduct: true,\n            skip: $skip,\n            take: $take }\n         ) {\n            totalItems\n            items {\n               productName\n               slug\n               productAsset {\n                  id\n                  preview\n               }\n               price {\n                  ... on SinglePrice {\n                     value\n                  }\n                  ... on PriceRange {\n                     min\n                     max\n                  }\n               }\n               currencyCode\n            }\n         }\n      }\n   ": types.GetCollectionProductsDocument,
    "\n      query GetCollections {\n         collections {\n            items {\n               id\n               slug\n               name\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   ": types.GetCollectionsDocument,
    "\n      query GetCustomer {\n         activeCustomer {\n            id\n            title\n            firstName\n            lastName\n            emailAddress\n         }\n      }\n   ": types.GetCustomerDocument,
    "\n      query GetProduct($slug: String!) {\n         product(slug: $slug) {\n            id\n            name\n            description\n            featuredAsset {\n               id\n               preview\n            }\n            assets {\n               id\n               preview\n            }\n            variants {\n               id\n               name\n               sku\n               stockLevel\n               currencyCode\n               price\n               priceWithTax\n               facetValues {\n                  id\n                  name\n                  facet {\n                     id\n                     name\n                  }\n               }\n               featuredAsset {\n                  id\n                  preview\n               }\n               assets {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   ": types.GetProductDocument,
    "\n      query GetProducts($options: ProductListOptions) {\n         products(options: $options) {\n            totalItems\n            items {\n               id\n               name\n               slug\n               description\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   ": types.GetProductsDocument,
    "\n      query GetTopLevelCollections {\n         collections(options: { topLevelOnly: true }) {\n            items {\n               id\n               slug\n               name\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   ": types.GetTopLevelCollectionsDocument,
    "\n      mutation RemoveItemFromOrder($orderLineId: ID!) {\n         removeOrderLine(orderLineId: $orderLineId) {\n            ...ActiveOrder\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   ": types.RemoveItemFromOrderDocument,
    "\n      mutation RequestPasswordReset($emailAddress: String!) {\n         requestPasswordReset(emailAddress: $emailAddress) {\n            ... on Success {\n               success\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   ": types.RequestPasswordResetDocument,
    "\n      mutation ResetPassword($token: String! $password: String!) {\n         resetPassword(token: $token password: $password) {\n            ...on CurrentUser {\n               id\n               identifier\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   ": types.ResetPasswordDocument,
    "\n      mutation LogIn($emailAddress: String!, $password: String!, $rememberMe: Boolean!) {\n         login(username: $emailAddress, password: $password, rememberMe: $rememberMe) {\n            ... on  CurrentUser {\n               id\n               identifier\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   ": types.LogInDocument,
    "\n      mutation LogOut {\n         logout {\n            success\n         }\n      }\n   ": types.LogOutDocument,
    "\n      mutation Register($input: RegisterCustomerInput!) {\n         registerCustomerAccount(input: $input) {\n            ... on Success {\n               success\n            }\n            ...on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   ": types.RegisterDocument,
    "\n      mutation AdjustOrderLine($orderLineId: ID!, $quantity: Int!) {\n         adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n            ...ActiveOrder\n            ... on ErrorResult {\n                  errorCode\n                  message\n            }\n         }\n      }\n   ": types.AdjustOrderLineDocument,
    "\n      mutation Verify($token: String!) {\n         verifyCustomerAccount(token: $token) {\n            ...on CurrentUser {\n               id\n               identifier\n            }\n            ...on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   ": types.VerifyDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation AddItemToOrder($variantId: ID!, $quantity: Int!) {\n         addItemToOrder(productVariantId: $variantId, quantity: $quantity) {\n            __typename\n            ...UpdatedOrder\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n            ... on InsufficientStockError {\n               quantityAvailable\n               order {\n                  ...UpdatedOrder\n               }\n            }\n         }\n      }\n      fragment UpdatedOrder on Order {\n         id\n         code\n         state\n         totalQuantity\n         totalWithTax\n         currencyCode\n         lines {\n            id\n            unitPriceWithTax\n            quantity\n            linePriceWithTax\n            productVariant {\n               id\n               name\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation AddItemToOrder($variantId: ID!, $quantity: Int!) {\n         addItemToOrder(productVariantId: $variantId, quantity: $quantity) {\n            __typename\n            ...UpdatedOrder\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n            ... on InsufficientStockError {\n               quantityAvailable\n               order {\n                  ...UpdatedOrder\n               }\n            }\n         }\n      }\n      fragment UpdatedOrder on Order {\n         id\n         code\n         state\n         totalQuantity\n         totalWithTax\n         currencyCode\n         lines {\n            id\n            unitPriceWithTax\n            quantity\n            linePriceWithTax\n            productVariant {\n               id\n               name\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetActiveOrder {\n         activeOrder {\n            ...ActiveOrder\n         }\n      }\n      fragment ActiveOrder on Order {\n         __typename\n         id\n         code\n         couponCodes\n         state\n         currencyCode\n         totalQuantity\n         subTotal\n         shipping\n         total\n         totalWithTax\n         taxSummary {\n            description\n            taxRate\n            taxBase\n            taxTotal\n         }\n         discounts {\n            description\n            amountWithTax\n         }\n         lines {\n            id\n            unitPrice\n            unitPriceWithTax\n            quantity\n            linePrice\n            linePriceWithTax\n            productVariant {\n               id\n               name\n               sku\n               product {\n                  slug\n               }\n            }\n            featuredAsset {\n               id\n               preview\n            }\n         }\n         shippingLines {\n            shippingMethod {\n               description\n            }\n            priceWithTax\n         }\n      }\n   "): (typeof documents)["\n      query GetActiveOrder {\n         activeOrder {\n            ...ActiveOrder\n         }\n      }\n      fragment ActiveOrder on Order {\n         __typename\n         id\n         code\n         couponCodes\n         state\n         currencyCode\n         totalQuantity\n         subTotal\n         shipping\n         total\n         totalWithTax\n         taxSummary {\n            description\n            taxRate\n            taxBase\n            taxTotal\n         }\n         discounts {\n            description\n            amountWithTax\n         }\n         lines {\n            id\n            unitPrice\n            unitPriceWithTax\n            quantity\n            linePrice\n            linePriceWithTax\n            productVariant {\n               id\n               name\n               sku\n               product {\n                  slug\n               }\n            }\n            featuredAsset {\n               id\n               preview\n            }\n         }\n         shippingLines {\n            shippingMethod {\n               description\n            }\n            priceWithTax\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetCollection($slug: String!) {\n         collection(slug: $slug) {\n            id\n            name\n            slug\n            description\n            featuredAsset {\n               id\n               preview\n            }\n         }\n      }\n   "): (typeof documents)["\n      query GetCollection($slug: String!) {\n         collection(slug: $slug) {\n            id\n            name\n            slug\n            description\n            featuredAsset {\n               id\n               preview\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetCollectionProducts($slug: String!, $skip: Int, $take: Int) {\n         search(\n         input: {\n            collectionSlug: $slug,\n            groupByProduct: true,\n            skip: $skip,\n            take: $take }\n         ) {\n            totalItems\n            items {\n               productName\n               slug\n               productAsset {\n                  id\n                  preview\n               }\n               price {\n                  ... on SinglePrice {\n                     value\n                  }\n                  ... on PriceRange {\n                     min\n                     max\n                  }\n               }\n               currencyCode\n            }\n         }\n      }\n   "): (typeof documents)["\n      query GetCollectionProducts($slug: String!, $skip: Int, $take: Int) {\n         search(\n         input: {\n            collectionSlug: $slug,\n            groupByProduct: true,\n            skip: $skip,\n            take: $take }\n         ) {\n            totalItems\n            items {\n               productName\n               slug\n               productAsset {\n                  id\n                  preview\n               }\n               price {\n                  ... on SinglePrice {\n                     value\n                  }\n                  ... on PriceRange {\n                     min\n                     max\n                  }\n               }\n               currencyCode\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetCollections {\n         collections {\n            items {\n               id\n               slug\n               name\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "): (typeof documents)["\n      query GetCollections {\n         collections {\n            items {\n               id\n               slug\n               name\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetCustomer {\n         activeCustomer {\n            id\n            title\n            firstName\n            lastName\n            emailAddress\n         }\n      }\n   "): (typeof documents)["\n      query GetCustomer {\n         activeCustomer {\n            id\n            title\n            firstName\n            lastName\n            emailAddress\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetProduct($slug: String!) {\n         product(slug: $slug) {\n            id\n            name\n            description\n            featuredAsset {\n               id\n               preview\n            }\n            assets {\n               id\n               preview\n            }\n            variants {\n               id\n               name\n               sku\n               stockLevel\n               currencyCode\n               price\n               priceWithTax\n               facetValues {\n                  id\n                  name\n                  facet {\n                     id\n                     name\n                  }\n               }\n               featuredAsset {\n                  id\n                  preview\n               }\n               assets {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "): (typeof documents)["\n      query GetProduct($slug: String!) {\n         product(slug: $slug) {\n            id\n            name\n            description\n            featuredAsset {\n               id\n               preview\n            }\n            assets {\n               id\n               preview\n            }\n            variants {\n               id\n               name\n               sku\n               stockLevel\n               currencyCode\n               price\n               priceWithTax\n               facetValues {\n                  id\n                  name\n                  facet {\n                     id\n                     name\n                  }\n               }\n               featuredAsset {\n                  id\n                  preview\n               }\n               assets {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetProducts($options: ProductListOptions) {\n         products(options: $options) {\n            totalItems\n            items {\n               id\n               name\n               slug\n               description\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "): (typeof documents)["\n      query GetProducts($options: ProductListOptions) {\n         products(options: $options) {\n            totalItems\n            items {\n               id\n               name\n               slug\n               description\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query GetTopLevelCollections {\n         collections(options: { topLevelOnly: true }) {\n            items {\n               id\n               slug\n               name\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "): (typeof documents)["\n      query GetTopLevelCollections {\n         collections(options: { topLevelOnly: true }) {\n            items {\n               id\n               slug\n               name\n               featuredAsset {\n                  id\n                  preview\n               }\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation RemoveItemFromOrder($orderLineId: ID!) {\n         removeOrderLine(orderLineId: $orderLineId) {\n            ...ActiveOrder\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation RemoveItemFromOrder($orderLineId: ID!) {\n         removeOrderLine(orderLineId: $orderLineId) {\n            ...ActiveOrder\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation RequestPasswordReset($emailAddress: String!) {\n         requestPasswordReset(emailAddress: $emailAddress) {\n            ... on Success {\n               success\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation RequestPasswordReset($emailAddress: String!) {\n         requestPasswordReset(emailAddress: $emailAddress) {\n            ... on Success {\n               success\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation ResetPassword($token: String! $password: String!) {\n         resetPassword(token: $token password: $password) {\n            ...on CurrentUser {\n               id\n               identifier\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation ResetPassword($token: String! $password: String!) {\n         resetPassword(token: $token password: $password) {\n            ...on CurrentUser {\n               id\n               identifier\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation LogIn($emailAddress: String!, $password: String!, $rememberMe: Boolean!) {\n         login(username: $emailAddress, password: $password, rememberMe: $rememberMe) {\n            ... on  CurrentUser {\n               id\n               identifier\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation LogIn($emailAddress: String!, $password: String!, $rememberMe: Boolean!) {\n         login(username: $emailAddress, password: $password, rememberMe: $rememberMe) {\n            ... on  CurrentUser {\n               id\n               identifier\n            }\n            ... on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation LogOut {\n         logout {\n            success\n         }\n      }\n   "): (typeof documents)["\n      mutation LogOut {\n         logout {\n            success\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation Register($input: RegisterCustomerInput!) {\n         registerCustomerAccount(input: $input) {\n            ... on Success {\n               success\n            }\n            ...on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation Register($input: RegisterCustomerInput!) {\n         registerCustomerAccount(input: $input) {\n            ... on Success {\n               success\n            }\n            ...on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation AdjustOrderLine($orderLineId: ID!, $quantity: Int!) {\n         adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n            ...ActiveOrder\n            ... on ErrorResult {\n                  errorCode\n                  message\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation AdjustOrderLine($orderLineId: ID!, $quantity: Int!) {\n         adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n            ...ActiveOrder\n            ... on ErrorResult {\n                  errorCode\n                  message\n            }\n         }\n      }\n   "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation Verify($token: String!) {\n         verifyCustomerAccount(token: $token) {\n            ...on CurrentUser {\n               id\n               identifier\n            }\n            ...on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "): (typeof documents)["\n      mutation Verify($token: String!) {\n         verifyCustomerAccount(token: $token) {\n            ...on CurrentUser {\n               id\n               identifier\n            }\n            ...on ErrorResult {\n               errorCode\n               message\n            }\n         }\n      }\n   "];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;